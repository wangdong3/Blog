1.Integer相关

java中一个字节以内的Integer，-128~127都是存在一个常量池中的，所以他们的引用也是相同的

	Integer i1 = 127;
	Integer i2 = 127;

	System.out.println(i1 == i2);

	结果是true；
	
    ---------------------------------

自动装箱的时候会调用Integer.valueof方法，会与IntegerCache里面的最大最小值做比较，在这个范围里的值就会直接取IntegerCache里的
	Integer i1 = 128;
	Integer i2 = 128;

	System.out.println(i1 == i2);

	结果是false；
	
	---------------------------------
	Integer i1 = 2000000000;
	Integer i2 = 2000000000;

	System.out.println(i1 == i2);
	
	结果是false；
	
	
2.Redis分布式锁

1）使用setNX命令缓存锁，如果没有则设置，获得锁
2）设置超时时间，
3）锁已经存在，获取锁的到期时间，与当前时间比较，超时的话，就设置新的值

3.CPU高 问题定位思路
（1）top 命令找出 CPU最高的进程id
（2）top -H -p pid  找到进程下CPU高的线程列表
（3）printf "%x\n" tid 将线程号转为16进制，方便下一步查找
	jstack pid | grep tid -A10 找到java线程的堆栈信息，分析业务

找到CPU高的程序。
也有可能是gc占据高CPU，这时要关注一下耗时较长的线程，可能有大对象gc时不能释放内存
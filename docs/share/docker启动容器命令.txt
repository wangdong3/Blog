https://docs.docker.com/docker-for-windows/install/

1. docker run -itd --name redis-test -p 6379:6379 redis

2. docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql

3. docker run -itd --name postgres-test -p 5432:5432 -e POSTGRES_PASSWORD=123456 -d postgres

4. docker run --name mongo-test -p 27017:27017 -d mongo:latest

5.
（1）
docker pull wurstmeister/zookeeper  
docker pull wurstmeister/kafka  
（2）启动zookeeper容器
docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper
（3）启动kafka容器
docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.31.2.43:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.31.2.43:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka
（4）测试kafka 进入kafka容器的命令行
docker exec -it kafka /bin/bash
（5）进入kafka所在目录
cd opt/kafka_2.12-2.5.0/
（6）启动消息发送方
 ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mykafka

（7）克隆会话 进入kafka所在目录
cd opt/kafka_2.12-2.5.0/
（8）启动消息接收方
 ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic mykafka --from-beginning

 kafka集群搭建
 （1）使用docker命令可快速在同一台机器搭建多个kafka，只需要改变brokerId和端口
 docker run -d --name kafka1 -p 9093:9093 -e KAFKA_BROKER_ID=1 -e KAFKA_ZOOKEEPER_CONNECT=172.3	1.3.67:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.31.2.43:9093 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 -t wurstmeister/kafka
（2）创建Replication为2，Partition为2的topic 在kafka容器中的opt/kafka_2.12-2.5.0/目录下输入
bin/kafka-topics.sh --create --zookeeper 172.31.2.43:2181 --replication-factor 2 --partitions 2 --topic partopic
（3）查看topic的状态 在kafka容器中的opt/kafka_2.12-1.1.0/目录下输入
bin/kafka-topics.sh --describe --zookeeper 172.31.2.43:2181 --topic partopic


6. docker run -itd --name myjenkins -p 8080:8080 -p 50000:50000 -v /var/jenkins_home	
jenkins/jenkins:2.138.2
docker exec -it myjenkins /bin/bash
docker logs myjenkins

<?xml version='1.0' encoding='UTF-8'?>
<sites>
  <site>
    <id>default</id>
    <url>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</url>
  </site>
</sites>

<?xml version='1.0' encoding='UTF-8'?>
<sites>
  <site>
    <id>default</id>
    <url>http://updates.jenkins-ci.org/update-center.json</url>
  </site>
</sites>


7.
docker pull elasticsearch
docker network create elasticsearch_net
docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 --network elasticsearch_net -v elasticsearch_volume:/root -e "privileged=true" -e "discovery.type=single-node" elasticsearch
echo 'http.cors.allow-origin: "*"' >> elasticsearch.yml
echo "http.cors.enabled: true" >> elasticsearch.yml
docker restart elasticsearch

8. rabbitmq
docker pull rabbitmq:management
docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management


9. nginx
docker pull nginx
docker run -d --name mynginx -p 80:80 f6d0


10. zipkin
docker pull openzipkin/zipkin
docker run -d -p 4321:4321 -p 9411:9411 --name zipkin openzipkin/zipkin
(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{400:function(s,a,t){s.exports=t.p+"assets/img/jvm.0cef4ac7.png"},425:function(s,a,t){"use strict";t.r(a);var e=t(56),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"jvm"}},[s._v("JVM")]),s._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#jvm-内存区域"}},[s._v("JVM内存区域")]),e("ul",[e("li",[e("a",{attrs:{href:"#运行时数据区域"}},[s._v("运行时数据区域")])]),e("li",[e("a",{attrs:{href:"#对象内存布局"}},[s._v("对象内存布局")])])])]),e("li",[e("a",{attrs:{href:"#类加载器"}},[s._v("类加载器")]),e("ul",[e("li",[e("a",{attrs:{href:"#加载器种类"}},[s._v("加载器种类")])]),e("li",[e("a",{attrs:{href:"#双亲委派模型"}},[s._v("双亲委派模型")])])])]),e("li",[e("a",{attrs:{href:"#类加载过程"}},[s._v("类加载过程")])]),e("li",[e("a",{attrs:{href:"#内存分配与回收策略"}},[s._v("内存分配与回收策略")])]),e("li",[e("a",{attrs:{href:"#判断对象是否存活"}},[s._v("判断对象是否存活")])]),e("li",[e("a",{attrs:{href:"#垃圾回收算法"}},[s._v("垃圾回收算法")])]),e("li",[e("a",{attrs:{href:"#垃圾收集器"}},[s._v("垃圾收集器")])]),e("li",[e("a",{attrs:{href:"#线程安全与锁优化"}},[s._v("线程安全与锁优化")]),e("ul",[e("li",[e("a",{attrs:{href:"#实现线程安全"}},[s._v("实现线程安全")])]),e("li",[e("a",{attrs:{href:"#锁优化"}},[s._v("锁优化")])])])]),e("li",[e("a",{attrs:{href:"#jvm-调优-待补充"}},[s._v("JVM调优（待补充）")]),e("ul",[e("li",[e("a",{attrs:{href:"#cpu高-问题定位思路"}},[s._v("CPU高 问题定位思路")])])])])])]),e("p"),s._v(" "),e("h2",{attrs:{id:"jvm内存区域"}},[e("code",[s._v("JVM")]),s._v("内存区域")]),s._v(" "),e("h3",{attrs:{id:"运行时数据区域"}},[s._v("运行时数据区域")]),s._v(" "),e("blockquote",[e("p",[s._v("虚拟机栈，方法区，堆，程序计数器，本地方法栈")])]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("线程共享")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("堆（对象实例、对象数组）")]),s._v(" "),e("blockquote",[e("p",[s._v("从回收内存的角度，基于分代的思想，划分：")])]),s._v(" "),e("div",{staticClass:"language-tex line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-tex"}},[e("code",[s._v("新生代（1/3）\n\tEden（8）\n\tsurvivor1（1）\n\tsurvivor2（1）\n\n老年代（2/3）\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("方法区（非堆） | 元空间（"),e("code",[s._v("JDK8")]),s._v("在本地内存实现）（存储类型信息、常量、静态变量、即时编译器编译的代码缓存等数据）")]),s._v(" "),e("ul",[e("li",[s._v("运行时常量池：编译期生成的各种字面量和字符引用")])])])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("线程私有")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("程序计数器（指向当前线程正在执行的字节码的指令的地址（行号））")])]),s._v(" "),e("li",[e("p",[s._v("本地方法栈（当前线程运行native方法所需数据、指令、返回地址）")])]),s._v(" "),e("li",[e("p",[s._v("虚拟机栈")]),s._v(" "),e("div",{staticClass:"language-tex line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-tex"}},[e("code",[s._v("栈帧（方法）:\n\n    1.局部变量表（方法中定义的变量）\n    \n    2.操作数栈（值入栈出栈）\n    \n    3.动态链接（动态运行时，栈帧所属方法的符号引用转化为直接引用）\n    \n    4.返回地址（方法退出时，要回到最初方法被调用时的位置）\t\t\n    \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])])])])])]),s._v(" "),e("p",[e("img",{attrs:{src:t(400),alt:""}})]),s._v(" "),e("h3",{attrs:{id:"对象内存布局"}},[s._v("对象内存布局")]),s._v(" "),e("blockquote",[e("p",[s._v("对象在堆内存存储布局分为三块：对象头、实例数据和对齐填充（占位符）")])]),s._v(" "),e("p",[s._v("对象头")]),s._v(" "),e("ul",[e("li",[s._v("自身运行时数据，包括"),e("code",[s._v("hashcode")]),s._v("、"),e("code",[s._v("GC分代年龄")]),s._v("、锁状态标志、线程持有的锁、偏向线程id、偏向时间戳")]),s._v(" "),e("li",[s._v("类型指针，对象指向它的类型元数据的指针，虚拟机通过这个指针确认对象属于哪个类的实例")])]),s._v(" "),e("blockquote",[e("p",[s._v("32位虚拟机中：对象头 = 25位对象"),e("code",[s._v("hashcode")]),s._v(" + 4位分代年龄 + 2位锁标志 + 1位固定0")])]),s._v(" "),e("h2",{attrs:{id:"类加载器"}},[s._v("类加载器")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("任意一个类 + 加载它的类加载器 ==》其在 Java 虚拟机中的唯一性；每一个类加载器，都有一个独立的类名称空间。")]),s._v(" "),e("blockquote",[e("p",[s._v("比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必定不相等。")]),s._v(" "),e("p",[s._v("这里的“相等”，包括代表类的 Class 对象的 equals() 方法、"),e("code",[s._v("isInstance()")]),s._v(" 方法的返回结果，也包括使用 "),e("code",[s._v("instanceof")]),s._v("关键字做对象所属关系判定等情况。")])])])]),s._v(" "),e("h3",{attrs:{id:"加载器种类"}},[e("strong",[s._v("加载器种类")])]),s._v(" "),e("ul",[e("li",[s._v("启动类加载器：负责将存放在 "),e("code",[s._v("<JAVA_HOME>\\lib")]),s._v(" 目录中的，并且能被虚拟机识别的（仅按照文件名识别，如 "),e("code",[s._v("rt.jar")]),s._v("，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。")]),s._v(" "),e("li",[s._v("扩展类加载器：负责加载 "),e("code",[s._v("<JAVA_HOME>\\lib\\ext")]),s._v(" 目录中的所有类库，开发者可以直接使用扩展类加载器。")]),s._v(" "),e("li",[s._v("应用程序类加载器：由于这个类加载器是 "),e("code",[s._v("ClassLoader")]),s._v("中的 "),e("code",[s._v("getSystemClassLoader()")]),s._v("方法的返回值，所以一般也称它为“系统类加载器”。它负责加载用户类路径（"),e("code",[s._v("classpath")]),s._v("）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。")])]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" LR\njvm"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(虚拟机层面)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("内置类加载器"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(1.bootstrap class loader)")]),s._v("\njvm"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("其他类加载器"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(2.继承自java.lang.ClassLoader的其他类加载器)")]),s._v("\n\n3cl"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(开发角度细分三层类加载器)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("1"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(启动类加载器)")]),s._v("\n3cl"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("2"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(扩展类加载器)")]),s._v("\n3cl"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("3"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(应用程序类加载器)")]),s._v("\n3"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("自定义类加载器1"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(自定义类加载器1)")]),s._v("\n3"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("自定义类加载器2"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(自定义类加载器2)")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"双亲委派模型"}},[e("strong",[s._v("双亲委派模型")])]),s._v(" "),e("blockquote",[e("p",[s._v("双亲委派模型是描述类加载器之间的层次关系。它要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。（父子关系一般不会以继承的关系实现，而是以组合关系来复用父加载器的代码）")])]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("工作过程")]),s._v("：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（找不到所需的类）时，子加载器才会尝试自己去加载。（在"),e("code",[s._v("java.lang.ClassLoader")]),s._v(" 中的 "),e("code",[s._v("loadClass()")]),s._v("方法中实现该过程。）")]),s._v(" "),e("li",[e("strong",[s._v("原因")]),s._v("：像 "),e("code",[s._v("java.lang.Object")]),s._v("这些存放在 "),e("code",[s._v("rt.jar")]),s._v(" 中的类，无论使用哪个类加载器加载，最终都会委派给最顶端的启动类加载器加载，从而使得不同加载器加载的 Object 类都是同一个。相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为 "),e("code",[s._v("java.lang.Object")]),s._v(" 的类，并放在 "),e("code",[s._v("classpath")]),s._v("下，那么系统将会出现多个不同的 Object 类，Java 类型体系中最基础的行为也就无法保证。")])]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" LR\n\n\nclr"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(类加载请求)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("cl"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(类加载器)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("pcl"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(父类加载器)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("bcl"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(顶层的启动类加载器)")]),s._v("\nbcl"),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("无法完成")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v("pcl\npcl"),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("无法完成")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v("cl\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"类加载过程"}},[s._v("类加载过程")]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" LR\na"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(Class文件)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("加载"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(加载)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("b1"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(验证)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("b2"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(准备)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("b3"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(解析)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("c"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(初始化)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("d"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(使用)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("---\x3e")]),s._v("e"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(卸载)")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("类加载详细过程")]),s._v("：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("加载：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("）通过类的全限定名获取该类的二进制字节流")])]),s._v(" "),e("li",[e("p",[s._v("）将二进制流所代表的静态结构转化为方法区的运行时数据结构")])]),s._v(" "),e("li",[e("p",[s._v("）在内存中创建一个代表该类的"),e("code",[s._v("java.lang.Class")]),s._v("对象，作为方法区中这个类的各种数据的访问入口")])])])]),s._v(" "),e("li",[e("p",[s._v("验证：")]),s._v(" "),e("ol",[e("li",[s._v("）文件格式，字节流是否符合class文件格式的规范，并且能被当前版本的虚拟机处理")]),s._v(" "),e("li",[s._v("）元数据验证 ，对字节码描述信息进行语义分析，确保其符合"),e("code",[s._v("java")]),s._v("语法规范")]),s._v(" "),e("li",[s._v("）字节码验证 对方法体进行语义分析，保证方法在运行时不会对虚拟机造成危害")]),s._v(" "),e("li",[s._v("）符号引用验证，在解析阶段，确保解析正常执行")])])]),s._v(" "),e("li",[e("p",[s._v("准备：正式为类变量（或者静态成员变量）分配内存并设置初始值，这些变量（不包括实例变量）所使用的内存都在方法区进行分配")])]),s._v(" "),e("li",[e("p",[s._v("解析：虚拟机将常量池中的符号引用替换为直接引用")])]),s._v(" "),e("li",[e("p",[s._v("初始化：执行类构造器"),e("code",[s._v("<clinit>()")]),s._v("方法的过程")]),s._v(" "),e("p",[e("code",[s._v("<clinit>()")]),s._v("方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。")]),s._v(" "),e("p",[e("strong",[s._v("5种情况会触发初始化：")])]),s._v(" "),e("p",[s._v("1）遇到"),e("code",[s._v("new、getstatic、putstatic、invokestatic")]),s._v("这四条季节吗指令的时候，如果类没有经过初始化，则需要触发类的初始化。场景是：new实例化对象、设置类的静态字段、读取类的静态字段、调用类的静态方法。")]),s._v(" "),e("p",[s._v("2）使用"),e("code",[s._v("java.lang.reflect")]),s._v("包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要触发其初始化")]),s._v(" "),e("p",[s._v("3）当初始化一个类的时候，发现其父类还没有进行过初始化，则需要先触发其父类的初始化")]),s._v(" "),e("p",[s._v("4）当虚拟机启动的时候，用户需要指定一个要执行的主类，即包含main方法的类，虚拟机会先初始化这个主类")]),s._v(" "),e("p",[s._v("5）当使用"),e("code",[s._v("jdk1.7")]),s._v("动态语言支持时，如果一个"),e("code",[s._v("java.lang.invoke.MethodHandle")]),s._v("实例最后的解析结果是 "),e("code",[s._v("REF_getstatic")]),s._v(","),e("code",[s._v("REF_putstatic")]),s._v(","),e("code",[s._v("REF_invokeStatic")]),s._v("的方法句柄，并且这个方法句柄对应的类没有进行初始化，则主要触发其初始化")])])]),s._v(" "),e("h2",{attrs:{id:"内存分配与回收策略"}},[s._v("内存分配与回收策略")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("对象优先在Eden区分配")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("大对象直接进入老年代")]),s._v("："),e("code",[s._v("-XX:PretenureSizeThreshold")]),s._v("参数，大于这个设置值的对象直接在老年代分配，这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制。")]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("长期存活的对象将进入老年代")]),s._v("："),e("code",[s._v("JVM")]),s._v(" 给每个对象定义了一个对象年龄计数器。当新生代发生一次 "),e("code",[s._v("Minor GC")]),s._v("后，存活下来的对象年龄 +1，当年龄超过一定值时，就将超过该值的所有对象转移到老年代中去。使用"),e("code",[s._v("-XXMaxTenuringThreshold")]),s._v("设置新生代的最大年龄，只要超过该参数的新生代对象都会被转移到老年代中去。")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("动态对象年龄判定")]),s._v("：如果当前新生代的 Survivor 中，相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄 >= 该年龄的对象就可以直接进入老年代，无须等到 "),e("code",[s._v("MaxTenuringThreshold")]),s._v("中要求的年龄。")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("空间分配担保")]),s._v("：通过清除老年代中废弃对象来扩大老年代空闲空间，以便给新生代作担保。")]),s._v(" "),e("p",[e("strong",[s._v("可能触发"),e("code",[s._v("JVM")]),s._v("进行"),e("code",[s._v("Full GC")]),s._v("的情况：")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("System.gc()")]),s._v("方法的调用")]),s._v(" "),e("li",[s._v("老年代空间不足")])])])]),s._v(" "),e("h2",{attrs:{id:"判断对象是否存活"}},[s._v("判断对象是否存活")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("引用计数法：在对象头维护着一个 counter 计数器，对象被引用一次则计数器 +1；若引用失效则计数器 -1。当计数器为 0 时，就认为该对象无效了。弊端：难解决对象之间循环引用的问题。")])]),s._v(" "),e("li",[e("p",[s._v("可达性分析法：所有和 "),e("code",[s._v("GC Roots")]),s._v("根对象直接或间接关联的对象都是有效对象，和 "),e("code",[s._v("GC Roots")]),s._v(" 没有关联的对象就是无效对象。")]),s._v(" "),e("p",[e("code",[s._v("GC Roots")]),s._v("包括：")]),s._v(" "),e("ul",[e("li",[s._v("Java 虚拟机栈（栈帧中的本地变量表）中引用的对象")]),s._v(" "),e("li",[s._v("本地方法栈中引用的对象")]),s._v(" "),e("li",[s._v("方法区中常量引用的对象")]),s._v(" "),e("li",[s._v("方法区中类静态属性引用的对象")])]),s._v(" "),e("p",[e("code",[s._v("GC Roots")]),s._v(" 并不包括堆中对象所引用的对象，这样就不会有循环引用的问题。")])])]),s._v(" "),e("h2",{attrs:{id:"垃圾回收算法"}},[s._v("垃圾回收算法")]),s._v(" "),e("blockquote",[e("p",[s._v("分代收集理论")])]),s._v(" "),e("ul",[e("li",[s._v("复制算法（新生代）")]),s._v(" "),e("li",[s._v("标记-清理")]),s._v(" "),e("li",[s._v("标记-整理")])]),s._v(" "),e("h2",{attrs:{id:"垃圾收集器"}},[s._v("垃圾收集器")]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" LR\na"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(serial)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(parallel)")]),s._v("\nb"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("c"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(CMS)")]),s._v("\nc"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("d"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(G1)")]),s._v("\n\nsc"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(serial+CMS组合)")]),s._v("\npc"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(parNew + CMS组合)")]),s._v("\n\np"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(parallel scavenge + serial old组合)")]),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("过渡")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v("pp"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(parallel scavenge + parallel old组合)")]),e("span",{pre:!0,attrs:{class:"token inter-arrow-label"}},[e("span",{pre:!0,attrs:{class:"token arrow-head arrow operator"}},[s._v("--")]),e("span",{pre:!0,attrs:{class:"token label property"}},[s._v("过渡")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")])]),s._v("G1"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(G1)")]),s._v("\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("Serial")]),s._v(" 最早出现的垃圾收集器")])]),s._v(" "),e("blockquote",[e("p",[s._v("单线程，在进行垃圾收集时，会暂停其他工作线程（"),e("code",[s._v("stop the world")]),s._v(")")])]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("ParNew")]),s._v("，"),e("code",[s._v("serial")]),s._v("的多线程并行版，新生代收集器（与"),e("code",[s._v("serial")]),s._v("一样带有空间压缩整理的能力，采用指针碰撞的分配算法来给对象分配内存）；")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("Serial old")])])]),s._v(" "),e("li",[e("p",[e("code",[s._v("parallel Scavenge")])])])]),s._v(" "),e("blockquote",[e("p",[s._v("致力于达到一个可控制的吞吐量（吞吐量=用户线程执行时间/用户线程执行时间+垃圾收集线程执行时间）")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("parallel old")])]),s._v(" "),e("li",[e("code",[s._v("CMS")]),s._v("：老年代的收集器，（基于清除算法，采用空闲列表来给对象分配内存）；")])]),s._v(" "),e("blockquote",[e("p",[s._v("首次实现了让垃圾收集线程与用户线程（基本上）同时工作，致力于缩短回收停顿时间。")])]),s._v(" "),e("p",[s._v("​\t运作过程")]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" TD\na"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(初始标记</br>Gc root能直接关联的对象)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(并发标记</br>遍历整个对象图)")]),s._v("\nb"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("c"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(重新标记</br>修正并发标记期间由于用户线程继续运作导致标记产生变动的对象的标记记录)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("d"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(并发清除</br>清理删除掉并发标记阶段判断已经死亡的对象)")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("G1")])])]),s._v(" "),e("blockquote",[e("p",[s._v("面向全堆的收集器，不需要和其他收集器配合一起工作")]),s._v(" "),e("p",[s._v("使用region划分内存空间，并且维护优先级列表（跟踪各个region区域回收所获得的空间大小以及回收所需时间数据）")])]),s._v(" "),e("p",[s._v("​\t运作过程")]),s._v(" "),e("div",{staticClass:"language-mermaid line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-mermaid"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("graph")]),s._v(" TD\na"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(初始标记)")]),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("b"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(并发标记)")]),s._v("\nb"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("c"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(最终标记)")]),s._v("\nc"),e("span",{pre:!0,attrs:{class:"token arrow operator"}},[s._v("--\x3e")]),s._v("d"),e("span",{pre:!0,attrs:{class:"token text string"}},[s._v("(筛选回收)")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"线程安全与锁优化"}},[s._v("线程安全与锁优化")]),s._v(" "),e("blockquote",[e("p",[s._v("当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都会获得正确的结果，那就称这个对象是线程安全的。")])]),s._v(" "),e("h3",{attrs:{id:"实现线程安全"}},[s._v("实现线程安全")]),s._v(" "),e("h4",{attrs:{id:"互斥同步-互斥实现同步"}},[s._v("互斥同步，（互斥实现同步）")]),s._v(" "),e("ul",[e("li",[e("p",[e("code",[s._v("synchronized")]),s._v("关键字")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("synchronized")]),s._v("关键字经过"),e("code",[s._v("javac")]),s._v("编译后，会在同步块前后形成"),e("code",[s._v("monitorenter")]),s._v("和"),e("code",[s._v("monitorexit")]),s._v("两条字节码指令")])]),s._v(" "),e("p",[e("code",[s._v("monitorenter")]),s._v("指令--》线程尝试获取对象的锁，如果对象没被锁定，或者当前线程已经持有对象的锁，锁的计数器的值加1")]),s._v(" "),e("p",[e("code",[s._v("monitorexit")]),s._v("，锁的计数器的值减1。一旦锁的计数器的值为0，锁释放")]),s._v(" "),e("p",[s._v("获取对象锁失败，当前线程被阻塞等待，直到请求锁定的对象被持有它的线程释放。")])]),s._v(" "),e("li",[e("p",[e("code",[s._v("Lock")]),s._v("接口")]),s._v(" "),e("p",[e("code",[s._v("ReentrantLock")]),s._v("，与"),e("code",[s._v("Synchronized")]),s._v("相比，增加了一些高级功能：")]),s._v(" "),e("p",[s._v("（1）等待可中断")]),s._v(" "),e("p",[s._v("（2）可实现公平锁")]),s._v(" "),e("p",[s._v("（3）锁绑定多个条件")])])]),s._v(" "),e("h4",{attrs:{id:"非阻塞同步-基于冲突检测的乐观并发策略"}},[s._v("非阻塞同步（基于冲突检测的乐观并发策略）")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("CAS")])])]),s._v(" "),e("h3",{attrs:{id:"锁优化"}},[s._v("锁优化")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("自旋锁与自适应锁")]),s._v(" "),e("ul",[e("li",[s._v("锁时间很短，让请求锁的线程等待，执行忙循环（自旋），不放弃处理器执行时间，避免线程切换的开销。 使用："),e("code",[s._v("-XX:+UseSpinning")]),s._v("开启；自旋次数默认10次，可使用参数"),e("code",[s._v("-XX:PreBlockSpin")]),s._v("自行修改。")]),s._v(" "),e("li",[s._v("自适应锁是对自旋锁的优化，自旋的时间由前一次在同一个锁的自旋时间和获取锁的线程的状态来决定")])])]),s._v(" "),e("li",[e("p",[s._v("锁消除")]),s._v(" "),e("p",[s._v("对不可能存在共享数据竞争的锁进行消除，在编译器即时编译之后，会忽略同步措施直接执行")])]),s._v(" "),e("li",[e("p",[s._v("锁粗化")]),s._v(" "),e("p",[s._v("在循环内对同一个对象反复进行加锁和解锁，频繁的互斥同步操作消耗性能，这种场景直接将锁粗化到外部，加一次锁即可")])]),s._v(" "),e("li",[e("p",[s._v("轻量级锁")]),s._v(" "),e("blockquote",[e("p",[s._v("对于绝大部分锁，在整个同步周期内不存在竞争，通过使用CAS操作避免使用互斥量的开销")])]),s._v(" "),e("p",[s._v('代码进入同步块，同步对象未被锁定（锁标志位"01"），虚拟机在当前线程的栈帧中建立一个名为锁记录的空间，用于存储目前对象'),e("code",[s._v("Mark Word")]),s._v("的拷贝，然后虚拟机使用"),e("code",[s._v("CAS")]),s._v("操作尝试将"),e("code",[s._v("Mark Word")]),s._v("更新为指向锁空间的指针。")]),s._v(" "),e("p",[s._v('操作成功即标识线程成功获取锁，对象的锁标志位更新为"00"，标识对象处于轻量级锁状态；')]),s._v(" "),e("p",[s._v("如果操作失败，意味着有其他线程竞争，虚拟机会先检查"),e("code",[s._v("Mark Word")]),s._v("是否指向当前线程栈帧，如果是，那么表名当前线程已经获取到该锁；否则说明锁对象已经被其他线程抢占。")]),s._v(" "),e("p",[s._v('如果存在两个以上的线程竞争同一把锁，这个时候锁膨胀为重量级锁，锁标志变为"10"。')])]),s._v(" "),e("li",[e("p",[s._v("偏向锁")]),s._v(" "),e("blockquote",[e("p",[s._v("消除数据再无竞争的情况下的同步操作")]),s._v(" "),e("p",[s._v("启用参数：-XX:UseBiasedLocking")])]),s._v(" "),e("p",[s._v("当锁对象第一次被线程获取时，虚拟机将"),e("code",[s._v("Mark Word")]),s._v('标识为"01"，偏向模式设置为"1"；同时使用'),e("code",[s._v("CAS")]),s._v("操作将获取锁的线程id记录到"),e("code",[s._v("Mark Word")]),s._v("；如果CAS成功，持有偏向锁的线程以后每次进入这个锁的相关同步块的时候，虚拟机可以不再执行同步操作；")]),s._v(" "),e("p",[s._v('一旦出现另外的线程尝试获取锁，会结束偏向模式，如果当前锁对象未被锁定，撤销偏向，偏向模式设置为"0"；标志位会变成"01"（未锁定状态）或者"00"（轻量级锁状态）')])])]),s._v(" "),e("h2",{attrs:{id:"jvm调优-待补充"}},[e("code",[s._v("JVM")]),s._v("调优（待补充）")]),s._v(" "),e("div",{staticClass:"language-properties line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-properties"}},[e("code",[s._v("//\n控制台打印gc日志，通过设置JVM参数设置\n\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("-Xms20m")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("-Xmx20m -Xmn10m -XX:+PrintGCDetails ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("-XX")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("+PrintGCTimeStamps 打印日志信息")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token attr-name"}},[s._v("-Xloggc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[s._v("log_gc.log gc日志输出文件")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"cpu高-问题定位思路"}},[s._v("CPU高 问题定位思路")]),s._v(" "),e("p",[s._v("（1）"),e("code",[s._v("top")]),s._v(" 命令找出 CPU最高的进程id\n（2）"),e("code",[s._v("top -H -p pid")]),s._v("  找到进程下CPU高的线程列表\n（3）"),e("code",[s._v('printf "%x\\n" tid')]),s._v(" 将线程号转为16进制，方便下一步查找\n"),e("code",[s._v("jstack pid | grep tid -A10")]),s._v(" 找到java线程的堆栈信息，分析业务")]),s._v(" "),e("p",[s._v("找到CPU高的程序。\n也有可能是gc占据高CPU，这时要关注一下耗时较长的线程，可能有大对象gc时不能释放内存")])])}),[],!1,null,null,null);a.default=r.exports}}]);
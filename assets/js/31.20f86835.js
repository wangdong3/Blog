(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{444:function(t,s,n){"use strict";n.r(s);var a=n(56),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据库-执行计划"}},[t._v("数据库 - 执行计划")]),t._v(" "),n("h3",{attrs:{id:"_1-执行计划命令"}},[t._v("1. 执行计划命令")]),t._v(" "),n("p",[n("strong",[t._v("explain")])]),t._v(" "),n("h3",{attrs:{id:"_2-命令参数"}},[t._v("2. 命令参数")]),t._v(" "),n("ul",[n("li",[n("p",[n("strong",[t._v("analyze")]),t._v("：选项为TRUE 会实际执行SQL，并获得相应的查询计划，默认为FALSE")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("buffers")]),t._v("：buffers必须跟analyze一起使用，只有真实执行SQL才能获取缓冲区信息")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("costs")]),t._v("：表示每一个计划节点的估计启动和总代价，以及估计的行数和每行的宽度")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Verbose")]),t._v(" ：显示关于计划的额外信息 ，例如：节点输出的列（Output）")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("Format")]),t._v("（text，xml，json，yaml）（格式化输出）")])])]),t._v(" "),n("p",[n("strong",[t._v("eg :")]),t._v(" "),n("code",[t._v("EXPLAIN ( ANALYSE TRUE, BUFFERS TRUE, VERBOSE true,COSTS TRUE, FORMAT text )")])]),t._v(" "),n("h3",{attrs:{id:"_3-输出含义"}},[t._v("3. 输出含义")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("输出参数")]),t._v(" "),n("th",[t._v("含义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("Cost")]),t._v(" "),n("td",[t._v("这个计划节点的预计的启动开销和总开销")])]),t._v(" "),n("tr",[n("td",[t._v("Rows")]),t._v(" "),n("td",[t._v("这个计划节点的预计输出行数")])]),t._v(" "),n("tr",[n("td",[t._v("Width")]),t._v(" "),n("td",[t._v("这个计划节点返回行的预计平均宽度(以字节计算)")])]),t._v(" "),n("tr",[n("td",[t._v("actual time")]),t._v(" "),n("td",[t._v("这个计划节点的实际启动时间和总运行时间")])]),t._v(" "),n("tr",[n("td",[t._v("Loops")]),t._v(" "),n("td",[t._v("这个计划节点的实际重启次数")])]),t._v(" "),n("tr",[n("td",[t._v("Filter")]),t._v(" "),n("td",[t._v("这个扫描节点的过滤条件")])]),t._v(" "),n("tr",[n("td",[t._v("Index Cond")]),t._v(" "),n("td",[t._v("这个索引扫描节点的索引匹配条件")])]),t._v(" "),n("tr",[n("td",[t._v("Rows Removed by Filter")]),t._v(" "),n("td",[t._v("这个扫描节点通过过滤条件过滤掉的行数")])]),t._v(" "),n("tr",[n("td",[t._v("Seq Scan")]),t._v(" "),n("td",[t._v("扫描表")])]),t._v(" "),n("tr",[n("td",[t._v("Index Scan")]),t._v(" "),n("td",[t._v("索引扫描")])]),t._v(" "),n("tr",[n("td",[t._v("Bitmap Index Scan")]),t._v(" "),n("td",[t._v("利用Bitmap 结构扫描")])]),t._v(" "),n("tr",[n("td",[t._v("Bitmap Heap Scan")]),t._v(" "),n("td",[t._v("把BitmapIndex Scan 返回的Bitmap 结构转换为元组结构")])]),t._v(" "),n("tr",[n("td",[t._v("Subquery Scan")]),t._v(" "),n("td",[t._v("子查询")])]),t._v(" "),n("tr",[n("td",[t._v("Cte Scan")]),t._v(" "),n("td",[t._v("用于扫描WITH 字句的结果集")])]),t._v(" "),n("tr",[n("td",[t._v("WorkTable Scan")]),t._v(" "),n("td",[t._v("用于扫描Recursive Union 的中间数据")])]),t._v(" "),n("tr",[n("td",[t._v("Function Scan")]),t._v(" "),n("td",[t._v("函数扫描")])]),t._v(" "),n("tr",[n("td",[t._v("Nested Loop")]),t._v(" "),n("td",[t._v("循环结合")])]),t._v(" "),n("tr",[n("td",[t._v("Merge Join")]),t._v(" "),n("td",[t._v("合并结合")])]),t._v(" "),n("tr",[n("td",[t._v("Hash Join")]),t._v(" "),n("td",[t._v("哈希结合")])]),t._v(" "),n("tr",[n("td",[t._v("Sort")]),t._v(" "),n("td",[t._v("排序，ORDER BY操作")])]),t._v(" "),n("tr",[n("td",[t._v("Hash")]),t._v(" "),n("td",[t._v("哈希运算")])]),t._v(" "),n("tr",[n("td",[t._v("Unique")]),t._v(" "),n("td",[t._v("DISTINCT，UNION操作")])]),t._v(" "),n("tr",[n("td",[t._v("Aggregate")]),t._v(" "),n("td",[t._v("count, sum,avg集约函数")])])])]),t._v(" "),n("h3",{attrs:{id:"_4-扫描"}},[t._v("4. 扫描")]),t._v(" "),n("ul",[n("li",[t._v("顺序扫描：也称为全表扫描，从头到尾扫描数据表，然后取出符合条件的数据")]),t._v(" "),n("li",[t._v("索引扫描：在索引中找出数据位置，然后再将数据取出")]),t._v(" "),n("li",[t._v("位图扫描：走索引，进行索引扫描，并且将符合条件的行的指针取出，存放在内存的位图里，扫描结束后，再对位图中的指针去读取数据块中的数据")])]),t._v(" "),n("h3",{attrs:{id:"_5-join"}},[t._v("5. join")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("嵌套循环（Nested Loops）或循环联接 ,时间复杂度O(m*n)（补充：索引可以提高nested loop 的效率,O(M**log(N))）")]),t._v(" "),n("p",[t._v("（1）A表提取一条记录，取B表查找相应的匹配记录，如果有，就把该条记录的信息推到等待返回的结果集中")]),t._v(" "),n("p",[t._v("（2）再去从A表中提取第二条记录，取B表中找匹配记录，如果有，就把记录信息返回结果集")]),t._v(" "),n("p",[t._v("（3）以此类推，直到A表中的数据全部被处理完成，将结果集返回，完成嵌套循环连接的操作")])]),t._v(" "),n("li",[n("p",[t._v("合并连接（merge join）")]),t._v(" "),n("p",[t._v("（1）A表先进行排序，形成临时表C")]),t._v(" "),n("p",[t._v("（2）B表排序，形成临时表D")]),t._v(" "),n("p",[t._v("（3）C与D进行合并操作，返回结果集")])]),t._v(" "),n("li",[n("p",[t._v("Hash连接（hash join）")]),t._v(" "),n("p",[t._v("（1）B表在内存建立一个散列表C")]),t._v(" "),n("p",[t._v("（2）从A表读取第一条记录，到C中查询匹配记录，若有，推到结果集中")]),t._v(" "),n("p",[t._v("（3）以此类推，直到A中没有记录，返回结果集")])])]),t._v(" "),n("h3",{attrs:{id:"_6-影响执行计划的参数"}},[t._v("6. 影响执行计划的参数")]),t._v(" "),n("div",{staticClass:"language-properties line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - Planner Method Configuration -")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_bitmapscan = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_hashagg = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_hashjoin = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_indexscan = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_indexonlyscan = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_material = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_mergejoin = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_nestloop = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_parallel_append = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_seqscan = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_sort = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_incremental_sort = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_tidscan = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_partitionwise_join = off")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_partitionwise_aggregate = off")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_parallel_hash = on")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#enable_partition_pruning = on")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br")])]),n("h3",{attrs:{id:"_7-执行计划原理"}},[t._v("7. 执行计划原理")]),t._v(" "),n("p",[n("code",[t._v("[参考](https://dreamer-yzy.github.io/2014/12/23/PostgreSQL执行计划和成本因子详解/)")])]),t._v(" "),n("p",[t._v("（1）PG对各表的统计信息：pg_stats、pg_class、pg_statistic")]),t._v(" "),n("p",[t._v("（2）成本因子：PostgreSQL是基于代价模型来选择最优的执行计划的，而成本因子则是计算代价模型的最重要参数。（代价=CPU代价+IO代价+数据传输[如网络]代价）")]),t._v(" "),n("p",[n("code",[t._v("postgresql.conf.sample")]),t._v("中可设置")]),t._v(" "),n("div",{staticClass:"language-properties line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-properties"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - Planner Cost Constants -")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#seq_page_cost = 1.0\t\t\t# measured on an arbitrary scale")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#random_page_cost = 4.0\t\t\t# same scale as above")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#cpu_tuple_cost = 0.01\t\t\t# same scale as above")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#cpu_index_tuple_cost = 0.005\t\t# same scale as above")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#cpu_operator_cost = 0.0025\t\t# same scale as above")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#parallel_tuple_cost = 0.1\t\t# same scale as above")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#parallel_setup_cost = 1000.0\t# same scale as above")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#jit_above_cost = 100000\t\t# perform JIT compilation if available")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t\t\t\t\t# and query more expensive than this;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t\t\t\t\t# -1 disables")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#jit_inline_above_cost = 500000\t\t# inline small functions if query is")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t\t\t\t\t# more expensive than this; -1 disables")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#jit_optimize_above_cost = 500000\t# use expensive JIT optimizations if")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t\t\t\t\t# query is more expensive than this;")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\t\t\t\t\t# -1 disables")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#min_parallel_table_scan_size = 8MB")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#min_parallel_index_scan_size = 512kB")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#effective_cache_size = 4GB")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br")])]),n("p",[t._v("（3）PostgreSQL的查询优化器会选择代价最小的来执行")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("-> SQL输入\n-> 解析SQL，获取解析后的语法树\n-> 分析、重写语法树，获取查询树\n-> 根据重写、分析后的查询树计算各路径代价，从而选择一条成本最优的执行树\n-> 根据执行树进行执行\n-> 获取结果并返回\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"_8-直方图"}},[t._v("8. 直方图")]),t._v(" "),n("blockquote",[n("p",[t._v("描述表中每列的数据分布")])]),t._v(" "),n("p",[t._v("直方图信息存储在pg_statistic表中，可通过其视图pg_stats来查看")]),t._v(" "),n("p",[n("code",[t._v("select tablename,attname,histogram_bounds from pg_statswhere tablename = '' and attname = '';")])])])}),[],!1,null,null,null);s.default=e.exports}}]);